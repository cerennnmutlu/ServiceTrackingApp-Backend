// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceTrackingApi.Data;

#nullable disable

namespace ServiceTrackingApi.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250826071301_FixPasswordHashesFormat")]
    partial class FixPasswordHashesFormat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServiceTrackingApi.Models.Driver", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DriverID");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            DriverID = 1,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Ali Yılmaz",
                            Phone = "0555 111 22 33",
                            Status = "Active"
                        },
                        new
                        {
                            DriverID = 2,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Ayşe Demir",
                            Phone = "0555 222 33 44",
                            Status = "Active"
                        },
                        new
                        {
                            DriverID = 3,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Mehmet Kaya",
                            Phone = "0555 333 44 55",
                            Status = "Active"
                        },
                        new
                        {
                            DriverID = 4,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Fatma Özkan",
                            Phone = "0555 444 55 66",
                            Status = "Active"
                        },
                        new
                        {
                            DriverID = 5,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Ahmet Çelik",
                            Phone = "0555 555 66 77",
                            Status = "Inactive"
                        },
                        new
                        {
                            DriverID = 6,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            FullName = "Zeynep Arslan",
                            Phone = "0555 666 77 88",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "ShiftManager"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "SecurityGuard"
                        });
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.Route", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("EstimatedDuration")
                        .HasColumnType("int");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RouteID");

                    b.HasIndex("RouteName")
                        .IsUnique();

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            RouteID = 1,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Merkez hattı",
                            Distance = 12.5m,
                            EstimatedDuration = 35,
                            RouteName = "Merkez-1",
                            Status = "Active"
                        },
                        new
                        {
                            RouteID = 2,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "OSB Batı",
                            Distance = 22.0m,
                            EstimatedDuration = 55,
                            RouteName = "Batı Hattı",
                            Status = "Active"
                        },
                        new
                        {
                            RouteID = 3,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sanayi Bölgesi Doğu",
                            Distance = 18.5m,
                            EstimatedDuration = 45,
                            RouteName = "Doğu Hattı",
                            Status = "Active"
                        },
                        new
                        {
                            RouteID = 4,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Üniversite Kampüsü",
                            Distance = 15.0m,
                            EstimatedDuration = 40,
                            RouteName = "Kuzey Hattı",
                            Status = "Active"
                        },
                        new
                        {
                            RouteID = 5,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Hastane ",
                            Distance = 20.0m,
                            EstimatedDuration = 50,
                            RouteName = "Güney Hattı",
                            Status = "Inactive"
                        });
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.ServiceVehicle", b =>
                {
                    b.Property<int>("ServiceVehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceVehicleID"));

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RouteID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceVehicleID");

                    b.HasIndex("PlateNumber")
                        .IsUnique();

                    b.HasIndex("RouteID");

                    b.ToTable("ServiceVehicles");

                    b.HasData(
                        new
                        {
                            ServiceVehicleID = 1,
                            Brand = "Mercedes",
                            Capacity = 16,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "Sprinter",
                            PlateNumber = "34ABC123",
                            RouteID = 1,
                            Status = "Active"
                        },
                        new
                        {
                            ServiceVehicleID = 2,
                            Brand = "Volkswagen",
                            Capacity = 16,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "Crafter",
                            PlateNumber = "34XYZ987",
                            RouteID = 2,
                            Status = "Active"
                        },
                        new
                        {
                            ServiceVehicleID = 3,
                            Brand = "Ford",
                            Capacity = 14,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "Transit",
                            PlateNumber = "06DEF456",
                            RouteID = 3,
                            Status = "Active"
                        },
                        new
                        {
                            ServiceVehicleID = 4,
                            Brand = "Mercedes",
                            Capacity = 18,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "Sprinter",
                            PlateNumber = "35GHI789",
                            RouteID = 4,
                            Status = "Active"
                        },
                        new
                        {
                            ServiceVehicleID = 5,
                            Brand = "Iveco",
                            Capacity = 12,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "Daily",
                            PlateNumber = "01JKL012",
                            RouteID = 1,
                            Status = "Maintenance"
                        },
                        new
                        {
                            ServiceVehicleID = 6,
                            Brand = "Volkswagen",
                            Capacity = 16,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "Crafter",
                            PlateNumber = "16MNO345",
                            RouteID = 2,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.Shift", b =>
                {
                    b.Property<int>("ShiftID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftID");

                    b.ToTable("Shifts", t =>
                        {
                            t.HasCheckConstraint("CK_Shift_Times", "[EndTime] <> [StartTime]");
                        });

                    b.HasData(
                        new
                        {
                            ShiftID = 1,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndTime = new TimeSpan(0, 18, 30, 0, 0),
                            ShiftName = "Gündüz (08:30-18:30)",
                            StartTime = new TimeSpan(0, 8, 30, 0, 0),
                            Status = "Active"
                        },
                        new
                        {
                            ShiftID = 2,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndTime = new TimeSpan(0, 8, 30, 0, 0),
                            ShiftName = "Gece-1 (00:30-08:30)",
                            StartTime = new TimeSpan(0, 0, 30, 0, 0),
                            Status = "Active"
                        },
                        new
                        {
                            ShiftID = 3,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            ShiftName = "Sabah (08:30-16:30)",
                            StartTime = new TimeSpan(0, 8, 30, 0, 0),
                            Status = "Active"
                        },
                        new
                        {
                            ShiftID = 4,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndTime = new TimeSpan(0, 0, 30, 0, 0),
                            ShiftName = "Akşam (16:30-00:30)",
                            StartTime = new TimeSpan(0, 16, 30, 0, 0),
                            Status = "Active"
                        },
                        new
                        {
                            ShiftID = 5,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            ShiftName = "Hafta Sonu (09:00-17:00)",
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.Tracking", b =>
                {
                    b.Property<int>("TrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ServiceVehicleID")
                        .HasColumnType("int");

                    b.Property<int>("ShiftID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TrackingDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TrackingID");

                    b.HasIndex("ShiftID");

                    b.HasIndex("ServiceVehicleID", "ShiftID", "TrackingDateTime");

                    b.ToTable("Trackings", t =>
                        {
                            t.HasCheckConstraint("CK_Tracking_MovementType", "[MovementType] IN ('Entry','Exit')");
                        });

                    b.HasData(
                        new
                        {
                            TrackingID = 1,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Entry",
                            ServiceVehicleID = 1,
                            ShiftID = 1,
                            TrackingDateTime = new DateTimeOffset(new DateTime(2025, 8, 26, 8, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TrackingID = 2,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Exit",
                            ServiceVehicleID = 1,
                            ShiftID = 1,
                            TrackingDateTime = new DateTimeOffset(new DateTime(2025, 8, 26, 18, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TrackingID = 3,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Entry",
                            ServiceVehicleID = 2,
                            ShiftID = 1,
                            TrackingDateTime = new DateTimeOffset(new DateTime(2025, 8, 26, 9, 15, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TrackingID = 4,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Exit",
                            ServiceVehicleID = 2,
                            ShiftID = 1,
                            TrackingDateTime = new DateTimeOffset(new DateTime(2025, 8, 26, 17, 45, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TrackingID = 5,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Entry",
                            ServiceVehicleID = 3,
                            ShiftID = 3,
                            TrackingDateTime = new DateTimeOffset(new DateTime(2025, 8, 26, 8, 35, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TrackingID = 6,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Exit",
                            ServiceVehicleID = 3,
                            ShiftID = 3,
                            TrackingDateTime = new DateTimeOffset(new DateTime(2025, 8, 26, 16, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TrackingID = 7,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Entry",
                            ServiceVehicleID = 4,
                            ShiftID = 4,
                            TrackingDateTime = new DateTimeOffset(new DateTime(2025, 8, 26, 16, 35, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TrackingID = 8,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            MovementType = "Entry",
                            ServiceVehicleID = 6,
                            ShiftID = 2,
                            TrackingDateTime = new DateTimeOffset(new DateTime(2025, 8, 27, 0, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test@admin.com",
                            FullName = "System Admin",
                            PasswordHash = "GR7mrJGQez9rgBazmSXGlokm4E0PnGHUDaf1aN1q5uc=",
                            RoleID = 1,
                            Username = "admin"
                        },
                        new
                        {
                            UserID = 2,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test@shift.com",
                            FullName = "Vardiya Müdürü",
                            PasswordHash = "cnQ4k7c2jxbnFpqyqyv1bS1lWgZThX3OwT8aiNuYuYM=",
                            RoleID = 2,
                            Username = "shiftmgr"
                        },
                        new
                        {
                            UserID = 3,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test@security.com",
                            FullName = "Güvenlik Görevlisi",
                            PasswordHash = "LbtnT+rccw9WaeDo69D+0eblN7lCWfhEsWlU1XXdZKI=",
                            RoleID = 3,
                            Username = "security"
                        });
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.VehicleDriverAssignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceVehicleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentID");

                    b.HasIndex("DriverID")
                        .IsUnique()
                        .HasFilter("[EndDate] IS NULL");

                    b.HasIndex("ServiceVehicleID")
                        .IsUnique()
                        .HasFilter("[EndDate] IS NULL");

                    b.ToTable("VehicleDriverAssignments");

                    b.HasData(
                        new
                        {
                            AssignmentID = 1,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            DriverID = 1,
                            ServiceVehicleID = 1,
                            StartDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            AssignmentID = 2,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            DriverID = 2,
                            ServiceVehicleID = 2,
                            StartDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            AssignmentID = 3,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            DriverID = 3,
                            ServiceVehicleID = 3,
                            StartDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            AssignmentID = 4,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            DriverID = 4,
                            ServiceVehicleID = 4,
                            StartDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            AssignmentID = 5,
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            DriverID = 6,
                            ServiceVehicleID = 6,
                            StartDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            AssignmentID = 6,
                            CreatedAt = new DateTime(2025, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            DriverID = 5,
                            EndDate = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            ServiceVehicleID = 5,
                            StartDate = new DateTime(2025, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.VehicleShiftAssignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentID"));

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceVehicleID")
                        .HasColumnType("int");

                    b.Property<int>("ShiftID")
                        .HasColumnType("int");

                    b.HasKey("AssignmentID");

                    b.HasIndex("ShiftID");

                    b.HasIndex("ServiceVehicleID", "ShiftID", "AssignmentDate")
                        .IsUnique();

                    b.ToTable("VehicleShiftAssignments");

                    b.HasData(
                        new
                        {
                            AssignmentID = 1,
                            AssignmentDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            ServiceVehicleID = 1,
                            ShiftID = 1
                        },
                        new
                        {
                            AssignmentID = 2,
                            AssignmentDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            ServiceVehicleID = 2,
                            ShiftID = 1
                        },
                        new
                        {
                            AssignmentID = 3,
                            AssignmentDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            ServiceVehicleID = 3,
                            ShiftID = 3
                        },
                        new
                        {
                            AssignmentID = 4,
                            AssignmentDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            ServiceVehicleID = 4,
                            ShiftID = 4
                        },
                        new
                        {
                            AssignmentID = 5,
                            AssignmentDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            ServiceVehicleID = 6,
                            ShiftID = 2
                        },
                        new
                        {
                            AssignmentID = 6,
                            AssignmentDate = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            ServiceVehicleID = 1,
                            ShiftID = 3
                        },
                        new
                        {
                            AssignmentID = 7,
                            AssignmentDate = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            ServiceVehicleID = 2,
                            ShiftID = 4
                        });
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.ServiceVehicle", b =>
                {
                    b.HasOne("ServiceTrackingApi.Models.Route", "Route")
                        .WithMany("ServiceVehicles")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.Tracking", b =>
                {
                    b.HasOne("ServiceTrackingApi.Models.ServiceVehicle", "ServiceVehicle")
                        .WithMany("Trackings")
                        .HasForeignKey("ServiceVehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceTrackingApi.Models.Shift", "Shift")
                        .WithMany("Trackings")
                        .HasForeignKey("ShiftID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceVehicle");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.User", b =>
                {
                    b.HasOne("ServiceTrackingApi.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.VehicleDriverAssignment", b =>
                {
                    b.HasOne("ServiceTrackingApi.Models.Driver", "Driver")
                        .WithMany("VehicleDriverAssignments")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceTrackingApi.Models.ServiceVehicle", "ServiceVehicle")
                        .WithMany("VehicleDriverAssignments")
                        .HasForeignKey("ServiceVehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("ServiceVehicle");
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.VehicleShiftAssignment", b =>
                {
                    b.HasOne("ServiceTrackingApi.Models.ServiceVehicle", "ServiceVehicle")
                        .WithMany("VehicleShiftAssignments")
                        .HasForeignKey("ServiceVehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceTrackingApi.Models.Shift", "Shift")
                        .WithMany("VehicleShiftAssignments")
                        .HasForeignKey("ShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceVehicle");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.Driver", b =>
                {
                    b.Navigation("VehicleDriverAssignments");
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.Route", b =>
                {
                    b.Navigation("ServiceVehicles");
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.ServiceVehicle", b =>
                {
                    b.Navigation("Trackings");

                    b.Navigation("VehicleDriverAssignments");

                    b.Navigation("VehicleShiftAssignments");
                });

            modelBuilder.Entity("ServiceTrackingApi.Models.Shift", b =>
                {
                    b.Navigation("Trackings");

                    b.Navigation("VehicleShiftAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
